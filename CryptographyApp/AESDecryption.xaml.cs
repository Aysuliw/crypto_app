using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace CryptographyApp
{
    /// <summary>
    /// Логика взаимодействия для AESDecryption.xaml
    /// </summary>
    public partial class AESDecryption : UserControl
    {
        uint[,] key = new uint[4, 4];
        uint[,] state = new uint[4, 4];
        uint[,] w = new uint[44, 4];
        string[] s = new string[9];
        string[] stateS = new string[40];
        string inputS, keyS;
        int count = 0;
        
        int r = 0;
        List<uint[,]> roundKeys = new List<uint[,]>();
        List<uint[,]> listState = new List<uint[,]>();
        public AESDecryption(string s, string k)
        {
            inputS = s;
            keyS = k;
            InitializeComponent();
            decrypt();
        }
        public static uint DecimalToHex(uint data)
        {
            string resultHex = data.ToString("X4");
            return Convert.ToUInt32(resultHex, 16);
        }
        static uint[,] Sbox = new uint[16, 16]
       {
            { 0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76 },
            { 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0 },
            { 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15 },
            { 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75 },
            { 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84 },
            { 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf },
            { 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8 },
            { 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2 },
            { 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73 },
            { 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb },
            { 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79 },
            { 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08 },
            { 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a },
            { 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e },
            { 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf },
            { 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 }
       };

        static uint[,] InvSbox = new uint[16, 16]{
            { 0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb },
            { 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb },
            { 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e },
            { 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25 },
            { 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92 },
            { 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84 },
            { 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06 },
            { 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b },
            { 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73 },
            { 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e },
            { 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b },
            { 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4 },
            { 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f },
            { 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef },
            { 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61 },
            { 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d }
        };

        static uint[] GMul9 = new uint[256]
        {
            0x00,0x09,0x12,0x1b,0x24,0x2d,0x36,0x3f,0x48,0x41,0x5a,0x53,0x6c,0x65,0x7e,0x77,
            0x90,0x99,0x82,0x8b,0xb4,0xbd,0xa6,0xaf,0xd8,0xd1,0xca,0xc3,0xfc,0xf5,0xee,0xe7,
            0x3b,0x32,0x29,0x20,0x1f,0x16,0x0d,0x04,0x73,0x7a,0x61,0x68,0x57,0x5e,0x45,0x4c,
            0xab,0xa2,0xb9,0xb0,0x8f,0x86,0x9d,0x94,0xe3,0xea,0xf1,0xf8,0xc7,0xce,0xd5,0xdc,
            0x76,0x7f,0x64,0x6d,0x52,0x5b,0x40,0x49,0x3e,0x37,0x2c,0x25,0x1a,0x13,0x08,0x01,
            0xe6,0xef,0xf4,0xfd,0xc2,0xcb,0xd0,0xd9,0xae,0xa7,0xbc,0xb5,0x8a,0x83,0x98,0x91,
            0x4d,0x44,0x5f,0x56,0x69,0x60,0x7b,0x72,0x05,0x0c,0x17,0x1e,0x21,0x28,0x33,0x3a,
            0xdd,0xd4,0xcf,0xc6,0xf9,0xf0,0xeb,0xe2,0x95,0x9c,0x87,0x8e,0xb1,0xb8,0xa3,0xaa,
            0xec,0xe5,0xfe,0xf7,0xc8,0xc1,0xda,0xd3,0xa4,0xad,0xb6,0xbf,0x80,0x89,0x92,0x9b,
            0x7c,0x75,0x6e,0x67,0x58,0x51,0x4a,0x43,0x34,0x3d,0x26,0x2f,0x10,0x19,0x02,0x0b,
            0xd7,0xde,0xc5,0xcc,0xf3,0xfa,0xe1,0xe8,0x9f,0x96,0x8d,0x84,0xbb,0xb2,0xa9,0xa0,
            0x47,0x4e,0x55,0x5c,0x63,0x6a,0x71,0x78,0x0f,0x06,0x1d,0x14,0x2b,0x22,0x39,0x30,
            0x9a,0x93,0x88,0x81,0xbe,0xb7,0xac,0xa5,0xd2,0xdb,0xc0,0xc9,0xf6,0xff,0xe4,0xed,
            0x0a,0x03,0x18,0x11,0x2e,0x27,0x3c,0x35,0x42,0x4b,0x50,0x59,0x66,0x6f,0x74,0x7d,
            0xa1,0xa8,0xb3,0xba,0x85,0x8c,0x97,0x9e,0xe9,0xe0,0xfb,0xf2,0xcd,0xc4,0xdf,0xd6,
            0x31,0x38,0x23,0x2a,0x15,0x1c,0x07,0x0e,0x79,0x70,0x6b,0x62,0x5d,0x54,0x4f,0x46
        };
        static uint[] GMul11 = new uint[256]
        {
            0x00,0x0b,0x16,0x1d,0x2c,0x27,0x3a,0x31,0x58,0x53,0x4e,0x45,0x74,0x7f,0x62,0x69,
            0xb0,0xbb,0xa6,0xad,0x9c,0x97,0x8a,0x81,0xe8,0xe3,0xfe,0xf5,0xc4,0xcf,0xd2,0xd9,
            0x7b,0x70,0x6d,0x66,0x57,0x5c,0x41,0x4a,0x23,0x28,0x35,0x3e,0x0f,0x04,0x19,0x12,
            0xcb,0xc0,0xdd,0xd6,0xe7,0xec,0xf1,0xfa,0x93,0x98,0x85,0x8e,0xbf,0xb4,0xa9,0xa2,
            0xf6,0xfd,0xe0,0xeb,0xda,0xd1,0xcc,0xc7,0xae,0xa5,0xb8,0xb3,0x82,0x89,0x94,0x9f,
            0x46,0x4d,0x50,0x5b,0x6a,0x61,0x7c,0x77,0x1e,0x15,0x08,0x03,0x32,0x39,0x24,0x2f,
            0x8d,0x86,0x9b,0x90,0xa1,0xaa,0xb7,0xbc,0xd5,0xde,0xc3,0xc8,0xf9,0xf2,0xef,0xe4,
            0x3d,0x36,0x2b,0x20,0x11,0x1a,0x07,0x0c,0x65,0x6e,0x73,0x78,0x49,0x42,0x5f,0x54,
            0xf7,0xfc,0xe1,0xea,0xdb,0xd0,0xcd,0xc6,0xaf,0xa4,0xb9,0xb2,0x83,0x88,0x95,0x9e,
            0x47,0x4c,0x51,0x5a,0x6b,0x60,0x7d,0x76,0x1f,0x14,0x09,0x02,0x33,0x38,0x25,0x2e,
            0x8c,0x87,0x9a,0x91,0xa0,0xab,0xb6,0xbd,0xd4,0xdf,0xc2,0xc9,0xf8,0xf3,0xee,0xe5,
            0x3c,0x37,0x2a,0x21,0x10,0x1b,0x06,0x0d,0x64,0x6f,0x72,0x79,0x48,0x43,0x5e,0x55,
            0x01,0x0a,0x17,0x1c,0x2d,0x26,0x3b,0x30,0x59,0x52,0x4f,0x44,0x75,0x7e,0x63,0x68,
            0xb1,0xba,0xa7,0xac,0x9d,0x96,0x8b,0x80,0xe9,0xe2,0xff,0xf4,0xc5,0xce,0xd3,0xd8,
            0x7a,0x71,0x6c,0x67,0x56,0x5d,0x40,0x4b,0x22,0x29,0x34,0x3f,0x0e,0x05,0x18,0x13,
            0xca,0xc1,0xdc,0xd7,0xe6,0xed,0xf0,0xfb,0x92,0x99,0x84,0x8f,0xbe,0xb5,0xa8,0xa3
        };
        static uint[] GMul13 = new uint[256]
       {
            0x00,0x0d,0x1a,0x17,0x34,0x39,0x2e,0x23,0x68,0x65,0x72,0x7f,0x5c,0x51,0x46,0x4b,
            0xd0,0xdd,0xca,0xc7,0xe4,0xe9,0xfe,0xf3,0xb8,0xb5,0xa2,0xaf,0x8c,0x81,0x96,0x9b,
            0xbb,0xb6,0xa1,0xac,0x8f,0x82,0x95,0x98,0xd3,0xde,0xc9,0xc4,0xe7,0xea,0xfd,0xf0,
            0x6b,0x66,0x71,0x7c,0x5f,0x52,0x45,0x48,0x03,0x0e,0x19,0x14,0x37,0x3a,0x2d,0x20,
            0x6d,0x60,0x77,0x7a,0x59,0x54,0x43,0x4e,0x05,0x08,0x1f,0x12,0x31,0x3c,0x2b,0x26,
            0xbd,0xb0,0xa7,0xaa,0x89,0x84,0x93,0x9e,0xd5,0xd8,0xcf,0xc2,0xe1,0xec,0xfb,0xf6,
            0xd6,0xdb,0xcc,0xc1,0xe2,0xef,0xf8,0xf5,0xbe,0xb3,0xa4,0xa9,0x8a,0x87,0x90,0x9d,
            0x06,0x0b,0x1c,0x11,0x32,0x3f,0x28,0x25,0x6e,0x63,0x74,0x79,0x5a,0x57,0x40,0x4d,
            0xda,0xd7,0xc0,0xcd,0xee,0xe3,0xf4,0xf9,0xb2,0xbf,0xa8,0xa5,0x86,0x8b,0x9c,0x91,
            0x0a,0x07,0x10,0x1d,0x3e,0x33,0x24,0x29,0x62,0x6f,0x78,0x75,0x56,0x5b,0x4c,0x41,
            0x61,0x6c,0x7b,0x76,0x55,0x58,0x4f,0x42,0x09,0x04,0x13,0x1e,0x3d,0x30,0x27,0x2a,
            0xb1,0xbc,0xab,0xa6,0x85,0x88,0x9f,0x92,0xd9,0xd4,0xc3,0xce,0xed,0xe0,0xf7,0xfa,
            0xb7,0xba,0xad,0xa0,0x83,0x8e,0x99,0x94,0xdf,0xd2,0xc5,0xc8,0xeb,0xe6,0xf1,0xfc,
            0x67,0x6a,0x7d,0x70,0x53,0x5e,0x49,0x44,0x0f,0x02,0x15,0x18,0x3b,0x36,0x21,0x2c,
            0x0c,0x01,0x16,0x1b,0x38,0x35,0x22,0x2f,0x64,0x69,0x7e,0x73,0x50,0x5d,0x4a,0x47,
            0xdc,0xd1,0xc6,0xcb,0xe8,0xe5,0xf2,0xff,0xb4,0xb9,0xae,0xa3,0x80,0x8d,0x9a,0x97
       };
        static uint[] GMul14 = new uint[256]
       {
            0x00,0x0e,0x1c,0x12,0x38,0x36,0x24,0x2a,0x70,0x7e,0x6c,0x62,0x48,0x46,0x54,0x5a,
            0xe0,0xee,0xfc,0xf2,0xd8,0xd6,0xc4,0xca,0x90,0x9e,0x8c,0x82,0xa8,0xa6,0xb4,0xba,
            0xdb,0xd5,0xc7,0xc9,0xe3,0xed,0xff,0xf1,0xab,0xa5,0xb7,0xb9,0x93,0x9d,0x8f,0x81,
            0x3b,0x35,0x27,0x29,0x03,0x0d,0x1f,0x11,0x4b,0x45,0x57,0x59,0x73,0x7d,0x6f,0x61,
            0xad,0xa3,0xb1,0xbf,0x95,0x9b,0x89,0x87,0xdd,0xd3,0xc1,0xcf,0xe5,0xeb,0xf9,0xf7,
            0x4d,0x43,0x51,0x5f,0x75,0x7b,0x69,0x67,0x3d,0x33,0x21,0x2f,0x05,0x0b,0x19,0x17,
            0x76,0x78,0x6a,0x64,0x4e,0x40,0x52,0x5c,0x06,0x08,0x1a,0x14,0x3e,0x30,0x22,0x2c,
            0x96,0x98,0x8a,0x84,0xae,0xa0,0xb2,0xbc,0xe6,0xe8,0xfa,0xf4,0xde,0xd0,0xc2,0xcc,
            0x41,0x4f,0x5d,0x53,0x79,0x77,0x65,0x6b,0x31,0x3f,0x2d,0x23,0x09,0x07,0x15,0x1b,
            0xa1,0xaf,0xbd,0xb3,0x99,0x97,0x85,0x8b,0xd1,0xdf,0xcd,0xc3,0xe9,0xe7,0xf5,0xfb,
            0x9a,0x94,0x86,0x88,0xa2,0xac,0xbe,0xb0,0xea,0xe4,0xf6,0xf8,0xd2,0xdc,0xce,0xc0,
            0x7a,0x74,0x66,0x68,0x42,0x4c,0x5e,0x50,0x0a,0x04,0x16,0x18,0x32,0x3c,0x2e,0x20,
            0xec,0xe2,0xf0,0xfe,0xd4,0xda,0xc8,0xc6,0x9c,0x92,0x80,0x8e,0xa4,0xaa,0xb8,0xb6,
            0x0c,0x02,0x10,0x1e,0x34,0x3a,0x28,0x26,0x7c,0x72,0x60,0x6e,0x44,0x4a,0x58,0x56,
            0x37,0x39,0x2b,0x25,0x0f,0x01,0x13,0x1d,0x47,0x49,0x5b,0x55,0x7f,0x71,0x63,0x6d,
            0xd7,0xd9,0xcb,0xc5,0xef,0xe1,0xf3,0xfd,0xa7,0xa9,0xbb,0xb5,0x9f,0x91,0x83,0x8d
       };
        static uint[,] Rcon = new uint[11, 4]{
            { 0x00, 0x00, 0x00, 0x00},
            { 0x01, 0x00, 0x00, 0x00},
            { 0x02, 0x00, 0x00, 0x00},
            { 0x04, 0x00, 0x00, 0x00},
            { 0x08, 0x00, 0x00, 0x00},
            { 0x10, 0x00, 0x00, 0x00},
            { 0x20, 0x00, 0x00, 0x00},
            { 0x40, 0x00, 0x00, 0x00},
            { 0x80, 0x00, 0x00, 0x00},
            { 0x1b, 0x00, 0x00, 0x00},
            { 0x36, 0x00, 0x00, 0x00}
        };
        public class DataItem
        {
            public string Column1 { get; set; }
            public string Column2 { get; set; }
            public string Column3 { get; set; }
            public string Column4 { get; set; }
        }
        public void displayMatrix(DataGrid data, uint[,] array)
        {

            data.Items.Clear();
            if (count <= 1 && r < 14)
            {
                for (int i = 1; i <= 4; ++i)
                {
                    var column = new DataGridTextColumn();

                    column.Binding = new Binding("Column" + i);

                    data.Columns.Add(column);
                }
                r++;
            }

            data.Items.Add(new DataItem { Column1 = array[0, 0].ToString("X2"), Column2 = array[0, 1].ToString("X2"), Column3 = array[0, 2].ToString("X2"), Column4 = array[0, 3].ToString("X2") });
            data.Items.Add(new DataItem { Column1 = array[1, 0].ToString("X2"), Column2 = array[1, 1].ToString("X2"), Column3 = array[1, 2].ToString("X2"), Column4 = array[1, 3].ToString("X2") });
            data.Items.Add(new DataItem { Column1 = array[2, 0].ToString("X2"), Column2 = array[2, 1].ToString("X2"), Column3 = array[2, 2].ToString("X2"), Column4 = array[2, 3].ToString("X2") });
            data.Items.Add(new DataItem { Column1 = array[3, 0].ToString("X2"), Column2 = array[3, 1].ToString("X2"), Column3 = array[3, 2].ToString("X2"), Column4 = array[3, 3].ToString("X2") });
            data.Items.Refresh();
        }
        public uint[] subWord(uint[] word)
        {
            uint[] result = new uint[4];
            result[0] = Sbox[word[0] >> 4, word[0] & 0x0f];
            result[1] = Sbox[word[1] >> 4, word[1] & 0x0f];
            result[2] = Sbox[word[2] >> 4, word[2] & 0x0f];
            result[3] = Sbox[word[3] >> 4, word[3] & 0x0f];
            return result;

        }
        public uint[] rotateWord(uint[] word)
        {
            uint[] result = new uint[4];
            result[0] = word[1];
            result[1] = word[2];
            result[2] = word[3];
            result[3] = word[0];
            return result;

        }
        public void keyGenerator()
        {
            for (int i = 0; i < 4; i++)
            {

                for (int j = 0; j < 4; j++)
                {
                    w[i, j] = key[j, i];
                }

            }
            uint[] temp = new uint[4];
            for (int i = 4; i < 44; i++)
            {
                temp[0] = w[i - 1, 0];
                temp[1] = w[i - 1, 1];
                temp[2] = w[i - 1, 2];
                temp[3] = w[i - 1, 3];
                if (i % 4 == 0)
                {
                    temp = subWord(rotateWord(temp));
                    temp[0] = temp[0] ^ Rcon[i / 4, 0];
                    temp[1] = temp[1] ^ Rcon[i / 4, 1];
                    temp[2] = temp[2] ^ Rcon[i / 4, 2];
                    temp[3] = temp[3] ^ Rcon[i / 4, 3];

                }
                w[i, 0] = w[i - 4, 0] ^ temp[0];
                w[i, 1] = w[i - 4, 1] ^ temp[1];
                w[i, 2] = w[i - 4, 2] ^ temp[2];
                w[i, 3] = w[i - 4, 3] ^ temp[3];
            }

            for (int i = 0; i < 11; i++)
            {
                uint[,] K = new uint[4, 4];
                for (int j = 0; j < 4; j++)
                {
                    K[0, j] = w[i * 4 + j, 0];
                    K[1, j] = w[i * 4 + j, 1];
                    K[2, j] = w[i * 4 + j, 2];

                    K[3, j] = w[i * 4 + j, 3];
                }
                roundKeys.Add(K);

            }

        }
        public void AddRoundKey(int round)
        {
            uint[,] tmpMatrix = new uint[4, 4];
            uint[,] P = roundKeys[round];
            for (int i = 0; i < 4; i++)
            {
                for (int j = 0; j < 4; j++)
                {
                    tmpMatrix[i, j] = state[i, j] ^ P[i, j];
                }
            }
            state = tmpMatrix;
            listState.Add(tmpMatrix);
        }
        
        public void InvShiftRows()
        {
            uint[,] tmpMatrix = new uint[4, 4];
            uint[,] shiftTemp = new uint[4, 4];
            for (int i = 0; i < 4; i++)
            {
                for (int j = 0; j < 4; j++)
                {
                    shiftTemp[i, j] = state[i, j];
                }
            }

            for (int i = 0; i < 4; i++)
            {
                for (int j = 0; j < 4; j++)
                {
                    tmpMatrix[i, (i + j) % 4] = shiftTemp[i, j];
                }
            }
            state = tmpMatrix;
            listState.Add(tmpMatrix);
        }

        public void InvSubBytes()
        {
            uint[,] tmpMatrix = new uint[4, 4];
            for (int i = 0; i < 4; i++)
            {
                for (int j = 0; j < 4; j++)
                {
                    tmpMatrix[i, j] = InvSbox[state[i, j] >> 4, state[i, j] & 0x0f];
                }
            }
            state = tmpMatrix;
            listState.Add(tmpMatrix);
        }
        public uint GMul(uint a, uint b)
        {
            uint p = 0;
            for (int i = 0; i < 8; i++)
            {
                if ((b & 1) != 0)
                {
                    p ^= a;
                }
                bool hi_bit_set = (a & 0x80) != 0;
                a <<= 1;
                if (hi_bit_set)
                {
                    a ^= 0x1B;
                }
                b >>= 1;
            }
            return p;
        }

        public void InvMixColumns()
        {
            uint[,] tmpMatrix = new uint[4, 4];
            uint[,] mixTemp = new uint[4, 4];
            for (int i = 0; i < 4; i++)
            {
                for (int j = 0; j < 4; j++)
                {
                    mixTemp[i, j] = state[i, j];
                }
            }
            for (int i = 0; i < 4; i++)
            {
                tmpMatrix[0, i] = (uint)(GMul14[ mixTemp[0, i]] ^ GMul11[mixTemp[1, i]] ^ GMul13[ mixTemp[2, i]] ^ GMul9[ mixTemp[3, i]]);
                tmpMatrix[1, i] = (uint)(GMul9[mixTemp[0, i]] ^ GMul14[mixTemp[1, i]] ^ GMul11[ mixTemp[2, i]] ^ GMul13[ mixTemp[3, i]]);
                tmpMatrix[2, i] = (uint)(GMul13[mixTemp[0, i]] ^ GMul9[mixTemp[1, i]] ^ GMul14[mixTemp[2, i]] ^ GMul11[ mixTemp[3, i]]);
                tmpMatrix[3, i] = (uint)(GMul11[mixTemp[0, i]] ^ GMul13[mixTemp[1, i]] ^ GMul9[ mixTemp[2, i]] ^ GMul14[ mixTemp[3, i]]);
            }
            state = tmpMatrix;
            listState.Add(tmpMatrix);
        }

        public void textBoxWrite(int c)
        {
            uint[,] tmpMatrix = new uint[4, 4];
            int p = c;
            c = c + 3 * (c - 1);
            roundBlock.Text = Convert.ToString(p) + "-raund";
            displayMatrix(shiftRowGrid, listState[c ]);
            displayMatrix(resultShiftRowGrid, listState[c + 1]);
            displayMatrix(subByteGrid, listState[c+1]);
            displayMatrix(resultSubByteGrid, listState[c + 2]);
            displayMatrix(keyGrid, roundKeys[10-p]);
            displayMatrix(entrystateGrid, listState[c + 2]);
            displayMatrix(finalstateGrid, listState[c + 3]);
            
            if (p<10)
            {
                mixColumnGrid.Visibility = Visibility.Visible;
                resultMixColumnGrid.Visibility = Visibility.Visible;
                displayMatrix(mixColumnGrid, listState[c + 3]);
                displayMatrix(resultMixColumnGrid, listState[c + 4]);
            }
            else
            {
                mixColumnGrid.Visibility = Visibility.Collapsed;
                resultMixColumnGrid.Visibility = Visibility.Collapsed;
            }
            

        }
        private void enableDisable(int count)
        {
            if (count <= 1)
            {
                backButton.IsEnabled = false;
            }
            else
            {
                backButton.IsEnabled = true;
            }
            if (count >= 9)
            {
                nextButton.IsEnabled = false;
            }
            else
            {
                nextButton.IsEnabled = true;
            }
        }
        private void beginButton_Click(object sender, RoutedEventArgs e)
        {

            count = 1;
            textBoxWrite(count);
            enableDisable(count);
        }

        private void nextButton_Click(object sender, RoutedEventArgs e)
        {
            enableDisable(count);

            count += 1;
            if (count == 6)
            {
                //finalResultFunction();
            }
            textBoxWrite(count);
        }

        private void backButton_Click(object sender, RoutedEventArgs e)
        {
            enableDisable(count);
            count -= 1;
            textBoxWrite(count);

        }
        

        private void finalResultButton_Click(object sender, RoutedEventArgs e)
        {
            uint[,] resultTmp = new uint[4, 4];
            resultTmp = listState[listState.Count - 1];
            for (int i = 0; i < 4; i++)
            {
                for (int j = 0; j < 4; j++)
                {
                    result.Text += resultTmp[j, i].ToString("x2");
                }
            }
        }

        public void decrypt()
        {
            //string inputS = inputBox.Text;
            //string keyS = keyBox.Text;
            uint[,] input = new uint[4, 4];
            uint[,] output = new uint[4, 4];

            for (int i = 0; i < 4; i++)
            {
                for (int j = 0; j < 4; j++)
                {
                    input[j, i] = Convert.ToUInt32(inputS.Substring(i*8+j*2,2), 16);
                    key[j, i] = Convert.ToUInt32(keyS[i*4 + j]);
                }

            }
            uint[,] tmp = new uint[4, 4];
            state = input;
            listState.Add(input);

            displayMatrix(hexTextGrid, listState[0]);

            displayMatrix(hexKeyGrid, key);

            keyGenerator();

            displayMatrix(key0Grid, roundKeys[10]);
            tmp = listState[0];
            displayMatrix(entrystate0Grid, tmp);
            AddRoundKey(10);
            tmp = listState[1];
            displayMatrix(finalstate0Grid, tmp);
            for (int i = 9; i >= 0; i--)
            {
                InvShiftRows();
                InvSubBytes();
                AddRoundKey(i);
                if (i >0)
                {
                    InvMixColumns();
                } 

            }
           
        }
    }
}
